DO $$
BEGIN
    -- Add the 'type' column to the 'inventory_pools' table.
    -- This column will store the category of the inventory, such as 'accommodation', 'food', or 'other'.
    -- It is a VARCHAR with a reasonable limit, and it can be NULL if not specified.
    ALTER TABLE public.inventory_pools
    ADD COLUMN type TEXT NULL;

    -- Add the 'description' column to the 'inventory_pools' table.
    -- This column is of type TEXT to allow for longer, detailed descriptions,
    -- which may include HTML content for rich formatting.
    ALTER TABLE public.inventory_pools
    ADD COLUMN description TEXT NULL;

    ALTER TABLE public.inventory_contexts
    ADD COLUMN data JSONB NULL;

    -- Step 1: Add the 'id' column if it does not already exist.
    -- This makes the script runnable even if the column has been partially added before.
    ALTER TABLE eshop.product_inventory_contexts
      ADD COLUMN IF NOT EXISTS id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL;

    -- Step 2: Drop the existing composite primary key constraint, if it exists.
    -- This is necessary before we can define a new primary key.
    ALTER TABLE eshop.product_inventory_contexts
      DROP CONSTRAINT IF EXISTS product_inventory_contexts_pkey;

    -- Step 3: Add the new primary key constraint on the 'id' column.
    -- We check if a PK with a different name already exists on 'id' to avoid errors.
    -- Note: A table can only have one primary key. This step assumes Step 2 was successful.
    ALTER TABLE eshop.product_inventory_contexts
      ADD CONSTRAINT product_inventory_contexts_pkey PRIMARY KEY (id);

    -- Step 4: Add a unique constraint to the combination of 'product' and 'inventory_context'.
    -- This preserves the original business rule that this pair must be unique.
    ALTER TABLE eshop.product_inventory_contexts
      ADD CONSTRAINT product_inventory_contexts_product_inventory_context_key UNIQUE (product, inventory_context);

END;
$$;